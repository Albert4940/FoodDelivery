@model FoodDeliveryWebApp.Models.OrderViewModel;
@{
    var Cart = Model?.Order;
    var Address = Model?.ShippingAddress;
    var OrderItems = Model?.OrderItems;
    var Payment = Model?.Payment;

    var clientId = Payment?.PayPalCientId.ToString() ?? null;
}

<script src="https://www.paypal.com/sdk/js?client-id=@(clientId)&components=buttons"></script>
<div id ="notification-container">

</div>
<div class="row">
    <div class="col-12 mb-3 col-md-8">
        @{
            if (Cart.IsPaid)
            {
                <div class="alert alert-info" role="alert">
                    This order is already paid!
                </div>
            }
        }
        <ul class="list-group">
            <li class="list-group-item">
                <h2>Shipping</h2>
                <p>
                    <strong>Address: </strong>
                    @Address.Address, @Address.City,
                    @Address.PostalCode,
                    @Address.Country
                </p>
            </li>

            <li class="list-group-item">
                @await Html.PartialAsync("_OrderItemsPartial", OrderItems)
            </li>
        </ul>
    </div>
    <div class="col-12 col-md-4">
        <div class="card">
            <ul class="list-group">
                <li class="list-group-item">
                    <h2>Order Summary</h2>
                </li>
                <li class="list-group-item">
                    <div class="row">
                        <div class="col">Items</div>
                        <div class="col">$@($"{Cart.ItemsPrice:N2}")</div>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="row">
                        <div class="col">Tax</div>
                        <div class="col">$@Cart.TaxPrice</div>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="row">
                        <div class="col">Shipping</div>
                        <div class="col">$@Cart.ShippingPrice</div>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="row">
                        <div class="col">Total</div>
                        <div class="col">@(Cart is null ? "0.00" : $"{Cart.TotalPrice:N2}")</div>
                    </div>
                </li>
                @{
                    if(!Cart.IsPaid)
                    {
                        <li id="payment-li" class="list-group-item">
                            <!--Remove this block inside li my be put it inside -->
                            <form>
                                <h5 for="exampleFormControlInput1" class="form-label">Payment Method</h5>
                                @foreach (var item in Model.Payment.PaymentMethodes)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input payment-check" type="radio" asp-for="Payment.PaymentMethod" value="@item" />
                                        @item
                                    </div>
                                }
                            </form>

                            <div id="payment-container">
                                <div id="paypal-container"></div>
                                <div id="creditcard-container">
                                    <!--Add a partial message to show message-->
                                    <div class="alert alert-info" role="alert">
                                        Feature implement soon!
                                    </div>
                                </div>
                            </div>
                        </li>
                    }                    
                }                
            </ul>
        </div>
    </div>
</div>

<!--<div class="p-5">
    <div class="mx-auto p-3 bg-primary w-50">
        <h2 class="text-center mb-5">Complete your order</h2>
        <div class="row mb-3">

        </div>
        <div id="notification-container">

        </div>
        
    </div>
</div>-->

@section Scripts {
    <script>
        //Payment method script
        //check if user login beacause if is no the paypal container don't show
        $("#payment-container > div").hide();
        $("#payment-container #paypal-container").show();

        $(".payment-check").click(function(){
            let payment = $(this).val();
            
            $("#payment-container > div").hide();
            $("#payment-container #" + payment.toLowerCase() + "-container").show();
        })


        let paypal_buttons = paypal.Buttons({
            createOrder() {
                return fetch("/Checkout/Create/", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body:JSON.stringify({
                        Id: @Cart.Id
                    })
                })
                    .then((response) => response.json())
                    .then((order) =>  order.id );
            },
            onApprove(data) {
                paypal_buttons.close();
                
                // This function captures the funds from the transaction.
                return fetch("/Checkout/Complete", {
                    method: "POST",
                    headers: {
                        "Content-Type":"application/json",
                    },
                    body: JSON.stringify({
                        orderID: data.orderID,
                        orderUserID:@Cart.Id
                    })
                })
                    .then((response) => response.json())
                    .then((details) => {
                        // This function shows a transaction success message to your buyer.
                        //Add this method into utils or helper
                        //hide payment container
                        if (details == "success")
                        {
                            $("#payment-li").remove();
                            $("#notification-container").html('<div class="alert alert-success" role="alert">The order is created successfully!</div>');
                        }
                        else
                            $("#notification-container").html('<div class="alert alert-danger" role="alert">Failed Approuve Order!</div>');
                    });
            },
            onCancel(data) {
                // Show a cancel page, or return to cart
                $("#notification-container").html('<div class="alert alert-info" role="alert">Order Canceled!</div>');

                return fetch("/checkout/Cancel", {
                    method: "POST",
                    body: JSON.stringify({
                        orderID: data.orderID
                    })
                })
            },

            onError(err) {
                // For example, redirect to a specific error page
                $("#notification-container").html('<div class="alert alert-danger" role="alert">Failed created !!' + err + ' - </div>');
            }
        });
        paypal_buttons.render('#paypal-container');
    </script>
}